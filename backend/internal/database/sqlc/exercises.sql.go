// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: exercises.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createExercise = `-- name: CreateExercise :one
INSERT INTO exercises (
    exercise_name,
    description
) VALUES (
    $1, $2
) RETURNING exercise_id, exercise_name, description, created_at
`

type CreateExerciseParams struct {
	ExerciseName string
	Description  sql.NullString
}

func (q *Queries) CreateExercise(ctx context.Context, arg CreateExerciseParams) (Exercise, error) {
	row := q.db.QueryRowContext(ctx, createExercise, arg.ExerciseName, arg.Description)
	var i Exercise
	err := row.Scan(
		&i.ExerciseID,
		&i.ExerciseName,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAllExercises = `-- name: DeleteAllExercises :exec
DELETE FROM exercises
`

func (q *Queries) DeleteAllExercises(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllExercises)
	return err
}

const deleteExercise = `-- name: DeleteExercise :one
DELETE FROM exercises 
WHERE exercise_id = $1
RETURNING exercise_id, exercise_name, description, created_at
`

func (q *Queries) DeleteExercise(ctx context.Context, exerciseID int32) (Exercise, error) {
	row := q.db.QueryRowContext(ctx, deleteExercise, exerciseID)
	var i Exercise
	err := row.Scan(
		&i.ExerciseID,
		&i.ExerciseName,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const exerciseExists = `-- name: ExerciseExists :one
SELECT EXISTS(
  SELECT 1 FROM exercises 
  WHERE exercise_name = $1
)
`

func (q *Queries) ExerciseExists(ctx context.Context, exerciseName string) (bool, error) {
	row := q.db.QueryRowContext(ctx, exerciseExists, exerciseName)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getAllExercises = `-- name: GetAllExercises :many
SELECT exercise_id, exercise_name, description, created_at FROM exercises 
ORDER BY exercise_id
`

func (q *Queries) GetAllExercises(ctx context.Context) ([]Exercise, error) {
	rows, err := q.db.QueryContext(ctx, getAllExercises)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Exercise
	for rows.Next() {
		var i Exercise
		if err := rows.Scan(
			&i.ExerciseID,
			&i.ExerciseName,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExerciseById = `-- name: GetExerciseById :one
SELECT exercise_id, exercise_name, description, created_at FROM exercises 
WHERE exercise_id = $1
`

func (q *Queries) GetExerciseById(ctx context.Context, exerciseID int32) (Exercise, error) {
	row := q.db.QueryRowContext(ctx, getExerciseById, exerciseID)
	var i Exercise
	err := row.Scan(
		&i.ExerciseID,
		&i.ExerciseName,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const getExerciseByName = `-- name: GetExerciseByName :one
SELECT exercise_id, exercise_name, description, created_at FROM exercises 
WHERE exercise_name = $1
`

func (q *Queries) GetExerciseByName(ctx context.Context, exerciseName string) (Exercise, error) {
	row := q.db.QueryRowContext(ctx, getExerciseByName, exerciseName)
	var i Exercise
	err := row.Scan(
		&i.ExerciseID,
		&i.ExerciseName,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const searchExercises = `-- name: SearchExercises :many
SELECT exercise_id, exercise_name, description, created_at FROM exercises 
WHERE exercise_name ILIKE $1 
ORDER BY exercise_name 
LIMIT $2
`

type SearchExercisesParams struct {
	ExerciseName string
	Limit        int32
}

func (q *Queries) SearchExercises(ctx context.Context, arg SearchExercisesParams) ([]Exercise, error) {
	rows, err := q.db.QueryContext(ctx, searchExercises, arg.ExerciseName, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Exercise
	for rows.Next() {
		var i Exercise
		if err := rows.Scan(
			&i.ExerciseID,
			&i.ExerciseName,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateExercise = `-- name: UpdateExercise :one
UPDATE exercises 
SET exercise_name = $2, description = $3
WHERE exercise_id = $1
RETURNING exercise_id, exercise_name, description, created_at
`

type UpdateExerciseParams struct {
	ExerciseID   int32
	ExerciseName string
	Description  sql.NullString
}

func (q *Queries) UpdateExercise(ctx context.Context, arg UpdateExerciseParams) (Exercise, error) {
	row := q.db.QueryRowContext(ctx, updateExercise, arg.ExerciseID, arg.ExerciseName, arg.Description)
	var i Exercise
	err := row.Scan(
		&i.ExerciseID,
		&i.ExerciseName,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}
